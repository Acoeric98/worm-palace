import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { PlayerClass } from '../types/game';

interface ClassSelectorProps {
  selectedClass: PlayerClass | null;
  onSelectClass: (playerClass: PlayerClass) => void;
  onConfirm: () => void;
  loading?: boolean;
}

const classInfo: Record<PlayerClass, {
  name: string;
  nameHu: string;
  description: string;
  descriptionHu: string;
  icon: string;
  strengths: string[];
  weaknesses: string[];
}> = {
  hunter: {
    name: 'Hunter',
    nameHu: 'Vad√°sz',
    description: 'Master of ranged combat and tracking',
    descriptionHu: 'A t√°vharci √©s nyomk√∂vet√©si mester',
    icon: 'üèπ',
    strengths: ['Pontoss√°g', 'Nyomk√∂vet√©s', 'Term√©szet ismeret'],
    weaknesses: ['K√∂zelharc', 'P√°nc√©lzat']
  },
  warrior: {
    name: 'Warrior',
    nameHu: 'Harcos',
    description: 'Strong melee fighter with heavy armor',
    descriptionHu: 'Er≈ës k√∂zelharci harcos neh√©z p√°nc√©lzattal',
    icon: '‚öîÔ∏è',
    strengths: ['Er≈ë', 'V√©delem', 'K√∂zelharc'],
    weaknesses: ['Mozg√©konys√°g', 'M√°gia']
  },
  ranger: {
    name: 'Ranger',
    nameHu: 'Erd≈ëj√°r√≥',
    description: 'Balanced fighter with nature magic',
    descriptionHu: 'Kiegyens√∫lyozott harcos term√©szet m√°gi√°val',
    icon: 'üå≤',
    strengths: ['Term√©szet m√°gia', 'Sokoldal√∫s√°g', 'Gy√≥gy√≠t√°s'],
    weaknesses: ['Specializ√°ci√≥ hi√°nya']
  },
  trickster: {
    name: 'Trickster',
    nameHu: 'Cseles',
    description: 'Sneaky fighter using tricks and deception',
    descriptionHu: 'Ravasz harcos tr√ºkk√∂kkel √©s megt√©veszt√©ssel',
    icon: 'üó°Ô∏è',
    strengths: ['Lopakod√°s', 'Kritikus sebz√©s', 'Sebezhet≈ës√©g'],
    weaknesses: ['Ellen√°ll√°s', '√âleter≈ë']
  },
  behemoth: {
    name: 'Behemoth',
    nameHu: 'Behem√≥t',
    description: 'Massive tank with incredible strength',
    descriptionHu: 'Hatalmas tank hihetetlen er≈ëvel',
    icon: 'üõ°Ô∏è',
    strengths: ['√âleter≈ë', 'Er≈ë', 'P√°nc√©lzat'],
    weaknesses: ['Sebess√©g', 'Energia k√∂lts√©g']
  },
  priest: {
    name: 'Priest',
    nameHu: 'Pap',
    description: 'Holy warrior with divine magic',
    descriptionHu: 'Szent harcos isteni m√°gi√°val',
    icon: '‚ú®',
    strengths: ['Gy√≥gy√≠t√°s', 'Isteni m√°gia', 'T√°mogat√°s'],
    weaknesses: ['Fizikai sebz√©s', 'P√°nc√©lzat']
  },
  medic: {
    name: 'Medic',
    nameHu: 'Orvos',
    description: 'Support fighter focused on healing',
    descriptionHu: 'T√°mogat√≥ harcos gy√≥gy√≠t√°sra f√≥kusz√°lva',
    icon: '‚öïÔ∏è',
    strengths: ['Gy√≥gy√≠t√°s', 'M√©reg elt√°vol√≠t√°s', 'T√°mogat√°s'],
    weaknesses: ['Offenz√≠v k√©pess√©gek', 'P√°nc√©lzat']
  }
};

export const ClassSelector = ({ selectedClass, onSelectClass, onConfirm, loading }: ClassSelectorProps) => {
  return (
    <div className="space-y-6">
      <div className="text-center">
        <h1 className="text-3xl font-bold text-primary mb-2">üé≠ Oszt√°ly V√°laszt√°s</h1>
        <p className="text-muted-foreground">
          V√°lassz egy oszt√°lyt a kukacod sz√°m√°ra. Ez meghat√°rozza a k√©pess√©geidet √©s harci st√≠lusodat.
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {(Object.keys(classInfo) as PlayerClass[]).map(classKey => {
          const info = classInfo[classKey];
          const isSelected = selectedClass === classKey;
          
          return (
            <Card 
              key={classKey} 
              className={`cursor-pointer transition-all border-2 ${
                isSelected 
                  ? 'border-primary bg-primary/5 scale-105' 
                  : 'border-primary/20 hover:border-primary/40'
              }`}
              onClick={() => onSelectClass(classKey)}
            >
              <CardHeader className="text-center">
                <div className="text-4xl mb-2">{info.icon}</div>
                <CardTitle className="text-xl">{info.nameHu}</CardTitle>
                <p className="text-sm text-muted-foreground">{info.descriptionHu}</p>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <h4 className="font-semibold text-green-600 mb-2">Er≈ëss√©gek:</h4>
                  <div className="flex flex-wrap gap-1">
                    {info.strengths.map(strength => (
                      <Badge key={strength} variant="outline" className="text-xs bg-green-50">
                        {strength}
                      </Badge>
                    ))}
                  </div>
                </div>
                
                <div>
                  <h4 className="font-semibold text-red-600 mb-2">Gyenges√©gek:</h4>
                  <div className="flex flex-wrap gap-1">
                    {info.weaknesses.map(weakness => (
                      <Badge key={weakness} variant="outline" className="text-xs bg-red-50">
                        {weakness}
                      </Badge>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>

      {selectedClass && (
        <div className="text-center">
          <Button onClick={onConfirm} size="lg" className="px-8" disabled={loading}>
            {loading
              ? 'Regisztr√°l√°s...'
              : `${classInfo[selectedClass].icon} ${classInfo[selectedClass].nameHu} V√°laszt√°sa`}
          </Button>
        </div>
      )}
    </div>
  );
};